-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias MeetupsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.MeetupFilter
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    }


{-|

  - filter -
  - limit -
  - offset -

-}
meetups : (MeetupsOptionalArguments -> MeetupsOptionalArguments) -> SelectionSet decodesTo Api.Object.Meetup -> SelectionSet (List decodesTo) RootQuery
meetups fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, limit = Absent, offset = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeMeetupFilter, Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "meetups" optionalArgs object_ (identity >> Decode.list)


type alias UserRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-|

  - id -

-}
user : UserRequiredArguments -> SelectionSet decodesTo Api.Object.User -> SelectionSet decodesTo RootQuery
user requiredArgs object_ =
    Object.selectionForCompositeField "user" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ identity
